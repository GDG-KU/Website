name: docker-build


on:
  push:
    tags:
      - release-**
env:
  DOCKER_IMAGE_DEV: ghcr.io/min010324/gdg-ku-website-dev
  DOCKER_CONTAINER_DEV: gdg-ku-website-dev

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Setup Docker
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: docker login
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor}}
          password: ${{ secrets.GDG_KU_WEB_BE_ACCESS_TOKEN}}

      - name: build and push image for dev server
        if: startsWith(github.ref, 'refs/tags/release-dev-')
        id: docker_build_dev
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKER_IMAGE_DEV }}:latest

  deploy_dev:
    needs: build
    if: startsWith(github.ref, 'refs/tags/release-dev-')
    runs-on: self-hosted
#    runs-on: ['self-hosted', 'dev']
    steps:
      - name: setup .env
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST}}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT}}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE}}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD}}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME}}" >> .env
          echo "PORT=${{ secrets.PORT}}" >> .env
          echo "NODE_ENV=dev" >> .env
          echo "GDG_KU_WEB_BE_ACCESS_TOKEN=${{ secrets.GDG_KU_WEB_BE_ACCESS_TOKEN}}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID}}" >> .env
          echo "GOOGLE_CLIENTSECRET=${{ secrets.GOOGLE_CLIENTSECRET}}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET}}" >> .env
          echo "REFRESH_TOKEN_EXPIRATION=${{ secrets.REFRESH_TOKEN_EXPIRATION}}" >> .env
          echo "ACCESS_TOKEN_EXPIRATION=${{ secrets.ACCESS_TOKEN_EXPIRATION}}" >> .env
          cat .env
      - name: Run Docker for develop
        run: |
          sudo docker stop ${{ env.DOCKER_CONTAINER_DEV }} || true
          sudo docker rm ${{ env.DOCKER_CONTAINER_DEV }} || true
          sudo docker rmi ${{ env.DOCKER_IMAGE_DEV }}:latest || true
          sudo docker run --env-file ./.env --platform linux/amd64 -d --name ${{ env.DOCKER_CONTAINER_DEV }} --network host --restart always -v /home/ec2-user/logs:/app/logs ${{ env.DOCKER_IMAGE_DEV }}:latest
